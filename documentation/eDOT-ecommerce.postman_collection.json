{
	"info": {
		"_postman_id": "82f0a404-41d3-4598-9830-97c3f2322011",
		"name": "eDOT-ecommerce",
		"description": "Postman Collections for Ecommerce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5963470"
	},
	"item": [
		{
			"name": "product-service",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{product_service_url}}/products?id=1",
							"host": [
								"{{product_service_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get data pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{product_service_url}}/products?page=2&limit=2",
							"host": [
								"{{product_service_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "shop-service",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWlucUB5b3BtYWkyc3psLmNvbSIsImV4cCI6MTcyODEyMTkxNCwiaWQiOjF9.pMBPlK4NXBaKQLYKeinDfRcWvaSuY9Dr9Q5fXI4h2wE",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shop_service_url}}/shops",
							"host": [
								"{{shop_service_url}}"
							],
							"path": [
								"shops"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get data by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWlucUB5b3BtYWkyc3psLmNvbSIsImV4cCI6MTcyODEyMTkxNCwiaWQiOjF9.pMBPlK4NXBaKQLYKeinDfRcWvaSuY9Dr9Q5fXI4h2wE",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{shop_service_url}}/shops/2",
							"host": [
								"{{shop_service_url}}"
							],
							"path": [
								"shops",
								"2"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWlucUB5b3BtYWkyc3psLmNvbSIsImV4cCI6MTcyODEyMTkxNCwiaWQiOjF9.pMBPlK4NXBaKQLYKeinDfRcWvaSuY9Dr9Q5fXI4h2wE",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Toko Matahari\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{shop_service_url}}/shops",
							"host": [
								"{{shop_service_url}}"
							],
							"path": [
								"shops"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWlucUB5b3BtYWkyc3psLmNvbSIsImV4cCI6MTcyODEyMTkxNCwiaWQiOjF9.pMBPlK4NXBaKQLYKeinDfRcWvaSuY9Dr9Q5fXI4h2wE",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{shop_service_url}}/shops/3",
							"host": [
								"{{shop_service_url}}"
							],
							"path": [
								"shops",
								"3"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/info?id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "user-service",
			"item": [
				{
					"name": "Get Me",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWlucUB5b3BtYWkyc3psLmNvbSIsImV4cCI6MTcyODEyMTA5OSwiaWQiOjF9.ypo_Zl2cVmuyyqae5iKySg2CcQT5v8ItHhPdWzgEq3A",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3001/me",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email_or_phone\":\"admin@edot.com\",\r\n    \"password\":\"Coba1234!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3001/login",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"admin\",\r\n    \"email\":\"admin@edot.com\",\r\n    \"phone\":\"08128919281\",\r\n    \"password\":\"Coba1234!\",\r\n    \"role\":\"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3001/register",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "warehouse-service",
			"item": [
				{
					"name": "Create Warehouse",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGVkb3QuY29tIiwiZXhwIjoxNzI4MTg4NDE0LCJpZCI6NSwicm9sZSI6ImFkbWluIn0.4zUgIYGh_xZMP3o_917f2L4EPS4wbDbs2Iv2MO9BjBA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Warehouse Bandung\",\r\n    \"location\":\"Bandung\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{warehouse_service_url}}/warehouse",
							"host": [
								"{{warehouse_service_url}}"
							],
							"path": [
								"warehouse"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set warehouse to shop",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGVkb3QuY29tIiwiZXhwIjoxNzI4MTg4NDE0LCJpZCI6NSwicm9sZSI6ImFkbWluIn0.4zUgIYGh_xZMP3o_917f2L4EPS4wbDbs2Iv2MO9BjBA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{warehouse_service_url}}/warehouse/:warehouseID/shop/:shopID",
							"host": [
								"{{warehouse_service_url}}"
							],
							"path": [
								"warehouse",
								":warehouseID",
								"shop",
								":shopID"
							],
							"variable": [
								{
									"key": "warehouseID",
									"value": "37"
								},
								{
									"key": "shopID",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Product Stock",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get Shops by Warehouse",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "order-service",
			"item": [
				{
					"name": "Place Order",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}