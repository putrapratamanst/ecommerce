// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	models "github.com/putrapratamanst/ecommerce/order-service/models"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: order
func (_m *OrderRepository) CreateOrder(order *models.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindExpiredOrders provides a mock function with given fields:
func (_m *OrderRepository) FindExpiredOrders() ([]models.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindExpiredOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrderByID provides a mock function with given fields: id
func (_m *OrderRepository) FindOrderByID(id uint) (*models.Order, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindOrderByID")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrdersByUserID provides a mock function with given fields: userID
func (_m *OrderRepository) FindOrdersByUserID(userID uint) ([]models.Order, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindOrdersByUserID")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.Order, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.Order); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: orderID, status
func (_m *OrderRepository) UpdateOrderStatus(orderID uint, status string) error {
	ret := _m.Called(orderID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(orderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
